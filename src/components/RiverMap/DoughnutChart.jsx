import React, { Component } from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import _ from 'lodash';
import { getPathData } from '../../utils/requestServer';
import processFlowData from '../../utils/processors/processFlowData';
import * as d3 from 'd3';

class DoughnutChart extends Component {
    constructor(props) {
        super(props);
    }

    componentDidUpdate() {
        initiateChart(this.props.index);
    }

    render() {
        return (
            <g height={1000} width={1000} className={'flow-data-chart doughnut-chart' + this.props.index} transform="translate(150, 150)">
                <g className={'graphics' + this.props.index}>
                    <path></path>
                </g>
            </g>
        );
    }
}

/**
 * Initiates the doughnut chart that surrounds the markers based on data provided
 * @param {*} index : each marker on the schematic must have its own index
 * @param {*} threshold : the threshold required to visualize the difference between everything below and above the threshold
 * @param {*} dataList : the data the charts with use, itis initialized to dummy data
 */
function initiateChart(index, threshold = 50, dataList = [90.72, 326.592, 76.81, 65.923, 74.39, 79.834, 59.27, 53.827, 108.259, 143.942, 169.949, 907.2, 677.376, 48.384, 36.288, 34.474, 96.768, 90.72, 151.2, 217.728, 241.92, 169.344, 163.296, 290.304, 544.32, 417.312, 2280.096, 798.336, 423.36, 247.968, 229.824, 108.864, 80.438, 74.995, 163.296, 90.72, 82.253, 62.294, 38.707, 30.24, 58.061, 90.72, 53.222, 30.24, 81.043, 69.552, 66.528, 58.666, 37.498, 38.102, 24.797, 22.982, 9.677, 13.91, 7.258, 2.419, 0, 0, 0, 0, 6.048, 24.192, 80.438, 84.067, 86.486, 20.563, 22.982, 30.24, 54.432, 108.864, 84.672, 175.392, 344.736, 665.28, 967.68, 350.784, 151.2, 108.864, 254.016, 217.728, 120.96, 64.714, 33.264, 25.402, 14.515, 10.886, 6.653, 8.467, 7.862, 4.234, 4.838, 3.629, 6.048, 4.234, 1.814, 0.605, 12.096, 1.21, 0, 0.605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.814, 149.386, 405.216, 22.982, 13.306, 11.491, 9.072, 211.075, 60.48, 48.384, 78.624, 120.96, 145.152, 133.056, 127.008, 133.056, 302.4, 320.544, 223.776, 205.632, 181.44, 405.216, 344.736, 266.112, 205.632, 96.768, 50.198, 35.683, 18.144, 9.072, 14.515, 17.539, 16.33, 12.701, 9.677, 9.072, 0, 0, 0, 29.635, 10.886, 9.677, 6.048, 4.234, 0, 0, 0, 0, 0, 0, 11.491, 21.168, 1.814, 0, 3.629, 29.03, 13.306, 27.216, 53.827, 19.958, 24.797, 14.515, 9.677, 10.282, 36.893, 42.336, 84.672, 42.336, 78.624, 102.816, 84.672, 102.816, 60.48, 108.864, 79.834, 36.893, 15.12, 6.653, 7.258, 3.024, 0.605, 1.21, 0, 1.814, 3.024, 0.605, 0, 0, 0, 0, 0, 3.629, 0, 0, 0, 0, 0, 0, 0, 0, 0.605, 0, 9.072, 0, 0, 0, 0, 17.539, 0, 0, 5.443, 11.491, 14.515, 13.91, 27.216, 33.264, 60.48, 84.672, 108.864, 193.536, 604.8, 1209.6, 290.304, 205.632, 157.248, 290.304, 139.104, 81.043, 56.851, 37.498, 27.821, 28.426, 80.438, 163.296, 74.995, 32.659, 16.33, 12.096, 7.258, 11.491, 12.096, 13.306, 16.33, 46.57, 47.174, 47.174, 47.174, 47.174, 46.57, 47.174, 46.57, 38.102, 29.635, 14.515, 13.91, 13.306, 7.258, 7.258, 12.701, 29.635, 30.24, 33.264, 28.426, 52.013, 23.587, 26.006, 30.845, 120.96, 90.72, 127.008, 151.2, 193.536, 241.92, 229.824, 254.016, 217.728, 151.2, 423.36, 284.256, 157.248, 90.72, 52.618, 26.611, 15.725, 45.965, 145.152, 83.462, 48.384, 12.096, 9.072, 0, 0, 0, 0, 0, 101.606, 92.534, 74.39, 58.666, 39.312, 9.072, 8.467, 29.635, 41.126, 36.288, 27.821, 25.402, 40.522, 43.546, 39.312, 9.072, 4.838, 10.886, 41.126, 36.893, 19.354, 24.797, 27.821, 42.336, 139.104, 120.96, 120.96, 169.344, 133.056, 151.2, 187.488, 157.248, 90.72, 84.672, 266.112, 145.152, 70.157, 33.264, 13.91, 1.814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31.45, 30.845, 55.037, 34.474, 24.797, 16.934, 4.234, 0, 0, 3.024, 0, 7.862, 74.39, 26.611, 10.886, 3.024, 0, 0, 6.048, 0, 0, 5.443, 36.288, 36.288, 24.192, 19.958, 29.635, 84.672, 151.2, 133.056, 145.152, 163.296, 163.296, 114.912, 308.448, 205.632, 175.392, 181.44, 108.864, 64.714, 37.498, 19.958, 14.515, 12.096, 7.862, 3.024, 3.629, 0.605, 2.419, 7.258, 0.605, 0, 10.886, 4.838, 7.258, 6.653, 1.21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12.096, 1.21, 0, 0, 1.21, 35.078, 42.336, 27.821, 26.611, 60.48, 84.672, 72.576, 127.008, 133.056, 120.96, 78.624, 54.432, 86.486, 29.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.605, 6.048, 12.701, 12.701, 30.845, 32.659, 42.336, 60.48, 102.816, 114.912, 290.304, 157.248, 84.672, 163.296, 108.864, 127.008, 44.15, 51.408, 45.36, 11.491, 3.629, 0, 6.653, 1.21, 0, 2.419, 4.234, 2.419, 1.814, 22.982, 45.36, 101.002, 78.019, 127.613, 60.48, 24.192, 14.515, 15.12, 0, 9.677, 7.258, 4.234, 1.814, 0, 0, 0, 0.605, 16.33, 0.605, 12.701, 3.024, 1.814, 7.862, 15.725, 42.336, 26.006, 72.576, 78.624, 145.152, 544.32, 435.456, 302.4, 266.112, 254.016, 199.584, 876.96, 453.6, 223.776, 139.104, 51.408, 18.749, 6.653, 7.862, 1.814, 0.605, 4.234, 0, 0, 0, 0, 0, 0, 13.91, 41.731, 44.15, 24.797, 29.03, 16.33, 0, 0, 0, 4.234, 5.443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64.109, 57.456, 16.934, 12.096, 15.725, 30.845, 60.48, 48.384, 78.624, 78.624, 84.672, 90.72, 290.304, 495.936, 320.544, 749.952, 350.784, 175.392, 90.72, 52.013, 61.69, 42.941, 18.749, 7.258, 7.258, 16.33, 20.563, 28.426, 57.456, 33.264, 29.635, 4.234, 26.611, 73.181, 67.738, 53.222, 38.102, 30.24, 30.24, 30.24, 0, 0.605, 0, 0, 0, 1.814, 0.605, 0.605, 0, 0, 0, 3.629, 9.677, 0.605, 6.048, 7.862, 60.48, 78.624, 102.816, 133.056, 175.392, 211.68, 181.44, 151.2, 127.008, 96.768, 72.576, 71.366, 50.198, 56.851, 70.157, 139.104, 26.006, 7.862, 1.21, 0, 96.768, 114.912, 169.344, 526.176, 217.728, 127.008, 78.019, 52.618, 33.869, 42.336, 63.504, 60.48, 37.498, 35.683, 13.306, 14.515, 18.144, 0, 3.629, 9.677, 0, 6.653, 9.072, 1.814, 0, 0, 0, 0, 40.522, 65.923, 12.096, 10.886, 11.491, 12.701, 22.982, 21.168, 42.336, 35.078, 108.864, 151.2, 78.624, 48.384, 42.336, 68.947, 26.611, 13.91, 1.814, 0.605, 0, 0, 53.222, 199.584, 114.912, 145.152, 145.152, 151.2, 175.392, 139.104, 108.864, 90.72, 18.749, 60.48, 53.827, 25.402, 45.36, 93.744, 25.402, 56.851, 13.306, 0, 13.306, 28.426, 24.797, 12.701, 6.048, 0, 0, 0, 0.605, 3.024, 6.653, 13.306, 12.096, 29.03, 42.336, 54.432, 48.384, 786.24, 356.832, 483.84, 278.208, 604.8, 362.88, 205.632, 604.8, 1475.712, 665.28, 332.64, 393.12, 1137.024, 520.128, 338.688, 151.2, 211.68, 387.072, 241.92, 356.832, 393.12, 241.92, 133.056, 64.714, 47.779, 51.408, 74.39, 83.462, 58.666, 37.498, 19.958, 45.965, 29.03, 15.12, 2.419, 21.773, 0, 0, 8.467, 14.515, 24.797, 51.408, 16.934, 4.234, 0, 188.093, 262.483, 108.864, 120.96, 108.864, 66.528, 54.432, 60.48, 78.624, 193.536, 211.68, 157.248, 169.344, 175.392, 163.296, 665.28, 387.072, 381.024, 169.344, 73.786, 61.085, 39.312, 26.611, 14.515, 10.282, 1.814, 2.419, 2.419, 0, 0, 0, 0, 0, 12.096, 10.886, 9.072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.258, 7.258, 5.443, 25.402, 16.934, 11.491, 9.677, 16.33, 22.378, 30.845, 48.384, 48.384, 42.336, 54.432, 60.48, 54.432, 96.768, 63.504, 30.24, 19.958, 27.821, 12.096, 12.701, 15.12, 12.096, 7.862, 0, 0, 0, 0, 0, 0, 0, 0, 14.515, 7.258, 7.862, 0.605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.024, 14.515, 7.258, 6.048, 10.282, 12.096, 54.432, 72.576, 120.96, 223.776, 374.976, 405.216, 308.448, 350.784, 447.552, 1300.32, 610.848, 465.696, 193.536, 120.96, 76.205, 61.085, 45.965, 96.768, 30.24, 41.126, 73.786, 90.72, 108.864, 74.39, 50.803, 29.03, 39.312, 62.899, 55.642, 53.222, 44.15, 36.893, 15.12, 6.048, 11.491, 14.515, 10.282, 8.467, 3.629, 5.443, 4.234, 10.886, 21.773, 21.168, 36.893, 94.954, 66.528, 71.971, 19.958, 16.934, 35.078, 72.576, 90.72, 102.816, 114.912, 151.2, 362.88, 411.264, 247.968, 211.68, 187.488, 580.608, 477.792, 254.016, 139.104, 82.253, 44.755, 35.078, 39.917, 332.64, 241.92, 181.44, 114.912, 90.72, 90.72, 79.834, 73.181, 45.36, 31.45, 105.84, 62.294, 17.539, 35.683, 51.408, 21.168, 30.24, 19.354, 21.168, 29.635, 18.144, 24.192, 0, 3.024, 29.03, 21.773, 12.096, 3.629, 538.272, 610.848]) {
    // The following code indexes through the data list and groups the 'under-threshold' values together and vice versa for 'over-threshold' values
    let data = {}, positive = 0, negative = 0;;
    if (dataList.length > 0) {
        for (var i = 0; i < dataList.length; i++) {
            if (dataList[i] <= threshold) {
                negative++;
            } else {
                positive++;
            }
        }
        data[0] = positive;
        data[1] = negative;

        makeDoughnutChart(data, index, threshold)
    }
}

/**
 * Creates the doughnut chart that surrounds the markers based on data provided
 * @param {*} index : each marker on the schematic must have its own index
 * @param {*} threshold : the threshold required to visualize the difference between everything below and above the threshold
 * @param {*} data : containing two values, the number of positive values and the number of negative values
 */
function makeDoughnutChart(data, index, threshold = 50) {
    // set the dimensions and margins of the graph
    var width = 500, height = 500, margin = 40;
    // The radius of the pieplot is half the width or half the height (smallest one). I substract a bit of margin.
    var radius = Math.min(width, height) / 2 - margin

    // append the svg object to the div called 'my_dataviz'
    var svg = d3.select("g.graphics" + index)
        .attr("width", width)
        .attr("height", height);

    var colorList = ["blue", "red"]

    // set the color scale
    var color = d3.scaleOrdinal()
        .domain(data)
        .range(colorList)

    // Compute the position of each group on the pie:
    var pie = d3.pie()
        .sort(null) // Do not sort group by size
        .value(function (d) { return d.value; })
    var data_ready = pie(d3.entries(data))

    svg
        .selectAll('path')
        .remove()

    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
    svg
        .selectAll('whatever')
        .data(data_ready)
        .enter()
        .append('path')
        .attr('d', d3.arc()
            .innerRadius(radius + 50)         // This is the size of the donut hole
            .outerRadius(radius + 100)
        )
        .attr('fill', function (d) { return (color(d.data.key)) })
        .attr("stroke", "black")
        .style("stroke-width", "2px")
        .style("opacity", 0.7)
}


function mapStateToProps(state) {
    return {
        flowData: state.delta.flowData
    };
}

export default connect(mapStateToProps, null)(DoughnutChart);