import React, { Component } from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { RiverMap, FilterPanel, FlowPanel, RootSchematic } from '../components';
import axios from 'axios';
import toastr from '../utils/toastr';
import { setFlowData } from '../redux/actions/actions';
import Loading from 'react-loading';
import xyParser from '../utils/xyParser';
import downloadJSON from '../utils/downloadJSON';
import _ from 'lodash';
import LegendPanel from '../components/MapLegend/LegendPanel';
import FileUpload from '../components/FileUpload';
import getFile from '../utils/getFile';
import { parse } from 'querystring';


class Parser extends Component {

    constructor(props) {
        super(props);
        this.state = {
            processing: false,
            processingSample: false,
            dataReady: false,
            jsonData: undefined
        };
        this.processFile = this.processFile.bind(this);
        this.downloadFile = this.downloadFile.bind(this);
    }

    processFile() {

        event.preventDefault();
        // turn on file processing loader
        this.setState({ processing: true, dataReady: false });
        getFile('xy-file')
        .then((response) => { return xyParser(response); })
        .then((parsedData) => { this.setState({ dataReady: true, jsonData: parsedData }); })
        .catch(() => {
            toastr["error"]("Failed to process files , Please try again.", "ERROR");
        })
        .finally(() => { this.setState({ processing: false });  });

        
    }
    downloadFile(event) {
        event.preventDefault();
        downloadJSON(this.state.jsonData);
        
    }

    render() {
        const { isSchematicLoading, SchematicData = { lines: [], artifacts: [], labels: [], markers: [] } } = this.state;
        const { processing, processingSample, dataReady, showGraphPanel } = this.state;
        //125px to offset the 30px margin on both sides and vertical scroll bar width
        let widthOfDashboard = document.body.getBoundingClientRect().width - 100,
            mapWidth = widthOfDashboard * 0.65;

        return (
            <div className='tools-root m-t text-xs-center text-sm-left' >
                <div className='container'>
                    <h2 className='text-center text-primary'>MODSIM XY File Processor</h2>
                    <p className='tools-text m-t m-b'>
                        This tools processes the '.xy' files generated by MODSIM and visualises the schematic in the same format as other schematics you've seen on the Dashboard. 
                    </p>
                    <FileUpload id='xy-file' label='XY file from MODSIM'/>
                    <button className="btn btn-primary-outline m-t process-btn" onClick={this.processFile}>
                        <span className='process-span'>{"PROCESS FILE"} </span>
                        {processing && <Loading type='spin' height='25px' width='25px' color='#d6e5ff' delay={-1} />}
                    </button>
                </div>
                {dataReady &&
                    <div>
                        <div className='container'>
                            <div className="alert alert-success m-t-md m-b">
                                <strong>File processing complete.</strong>
                                You can use the buttons below to download your schematic's data as a JSON file or visualize the schematic for a quick overview.
                            </div>
                            <button className="btn btn-success-outline m-r" onClick={this.downloadFile}>Download</button>
                        </div>
                        </div>}
            </div>

        );
    }
}

function mapDispatchToProps(dispatch) {
    return {
        actions: bindActionCreators({ setFlowData }, dispatch)
    };
}

export default connect(null, mapDispatchToProps)(Parser);

