import React, { Component } from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { RiverMap, FileUpload, LegendPanel } from '../components';
import toastr from '../utils/toastr';
import { setFlowData } from '../redux/actions/actions';
import Loading from 'react-loading';
import xyParser from '../utils/xyParser';
import downloadJSON from '../utils/downloadJSON';
import _ from 'lodash';
import getFile from '../utils/getFile';


class Parser extends Component {

    constructor(props) {
        super(props);
        this.state = {
            processing: false,
            dataReady: false,
            visualize: false,
            jsonData: undefined,
            schematicData: undefined,
            fileName: "",
        };
        this.processFile = this.processFile.bind(this);
        this.downloadFile = this.downloadFile.bind(this);
        this.visualizeRecords = this.visualizeRecords.bind(this);
    }

    processFile() {
        // turn on file processing loader
        this.setState({ processing: true, dataReady: false, visualize: false, jsonData: undefined, schematicData: undefined });
        getFile('xy-file')
            .then((response) => { return xyParser(response); })
            .then((parsedData) => {
                const clonedData = Object.assign({}, parsedData);
                this.setState({
                    dataReady: true,
                    schematicData: clonedData,
                    jsonData: parsedData,
                    fileName: document.getElementById("xy-file").files[0].name
                });
            })
            .catch(() => {
                toastr["error"]("Failed to process files, Please try again.", "ERROR");
            })
            .finally(() => { this.setState({ processing: false }); });
    }

    downloadFile(event) {
        event.preventDefault();
        downloadJSON(this.state.schematicData, this.state.fileName);
    }
    visualizeRecords() {
        this.setState({ visualize: true });
    }

    render() {
        const { processing, visualize, dataReady } = this.state;
        //125px to offset the 30px margin on both sides and vertical scroll bar width
        let widthOfDashboard = document.body.getBoundingClientRect().width,
            mapWidth = widthOfDashboard * 0.60,
            widthOfSlider = 100;

        // reduce the width of the slider from the map
        mapWidth = mapWidth - widthOfSlider;

        return (
            <div className='tools-root m-t text-xs-center text-sm-left'>
                <div className='container'>
                    <h2 className='text-center text-primary'>MODSIM XY File Processor</h2>
                    <p className='tools-text m-t m-b'>
                        This tool processes the '.xy' files generated by MODSIM and visualizes the schematic in the same format as the other schematics you've seen on the Dashboard.
                    </p>
                    <FileUpload id='xy-file' label='XY file from MODSIM' />
                    <button className="btn btn-primary-outline m-t process-btn" onClick={this.processFile}>
                        <span className='process-span'>{"PROCESS FILE"} </span>
                        {processing && <Loading type='spin' height='25px' width='25px' color='#d6e5ff' delay={-1} />}
                    </button>
                </div>
                {dataReady &&
                    <div>
                        <div className='container'>
                            <div className="alert alert-success m-t-md m-b">
                                <strong>File processing complete.</strong>
                                You can use the buttons below to download your schematic's data as a JSON file or visualize the schematic for a quick overview.
                            </div>
                            <button className="btn btn-success-outline m-r" onClick={this.downloadFile}>Download</button>
                            <button className="btn btn-success-outline " onClick={this.visualizeRecords}>Visualize Schematic</button>
                        </div>
                    </div>}
                {visualize &&
                    <div className='text-center'>
                        <RiverMap
                            schematicData={this.state.jsonData}
                            width={mapWidth}
                            height={mapWidth / 2}
                            fromDashboard={false} />
                        <LegendPanel />
                    </div>
                }
            </div>
        );

    }
}

function mapDispatchToProps(dispatch) {
    return {
        actions: bindActionCreators({ setFlowData }, dispatch)
    };
}

export default connect(null, mapDispatchToProps)(Parser);

